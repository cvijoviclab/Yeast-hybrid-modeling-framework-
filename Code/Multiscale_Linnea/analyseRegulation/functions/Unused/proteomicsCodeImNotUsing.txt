% %% Looking at regulation problem
% [modelProteomics]=addProtData(geneExprG0,proteomics);
% modelProteomics.G0regulation=geneExprG0.rank;
% modelProteomics.G1regulation=geneExprG1.rank;
% modelSimulated=table();
% modelSimulated.respitrationAve=mean(enzUsages_reducedYeast{:,3:13},2);
% modelSimulated.fermentationAve=mean(enzUsages_reducedYeast{:,72:81},2);
% modelSimulated.TotalAve=mean(enzUsages_reducedYeast{:,3:81},2);
% plotfigure5b(modelProteomics,modelSimulated)
% 
% %Bhattacharyya distance
% q = modelProteomics.h33;
% p = modelSimulated.respitrationAve;
% BC=sum(sqrt(p.*q));
% D_b=-log(BC);
% disp(['The Bhattacharyya distance during respiration is ' num2str(D_b)])
% 
% q = modelProteomics.h5;
% p = modelSimulated.fermentationAve;
% BC=sum(sqrt(p.*q));
% D_b=-log(BC);
% disp(['The Bhattacharyya distance during fermentation is ' num2str(D_b)])
% 
% %foldchange difference and kmean
% fcG0=table();
% fcG0.rank = modelProteomics.G0regulation;
% fcG0.abs = abs(modelSimulated.respitrationAve-modelProteomics.h33);
% fcG0.abs(modelProteomics.G0regulation==0)=nan;
% fcG0.abs(fcG0.abs==0)=nan;
% fcG0.class=kmeans(fcG0.abs,3);
% figure(1)
% plot(fcG0.abs(fcG0.class==1,:),'LineWidth',3);
% hold on
% plot(fcG0.abs(fcG0.class==2,:),'LineWidth',3);
% plot(fcG0.abs(fcG0.class==3,:),'LineWidth',3);
% hold off
% fcG0.foldchange = modelSimulated.respitrationAve./modelProteomics.h33;
% fcG0.foldchange(modelProteomics.G0regulation==0)=nan;
% fcG0.foldchange(fcG0.abs==0)=nan;
% fcG0(fcG0.foldchange<0 & fcG0.foldchange>0,:)
% fcG0(fcG0.foldchange<1 & fcG0.class==1,:)
% 
% varfun(@mean,fcG0,'InputVariables','abs','GroupingVariables','class')
% varfun(@mean,fcG0,'InputVariables','foldchange','GroupingVariables','rank')
% 
% fcG1=table();
% fcG1.foldchange = modelSimulated.fermentationAve./modelProteomics.h5;
% fcG1.rank = modelProteomics.G1regulation;
% fcG1.abs = abs(modelSimulated.fermentationAve-modelProteomics.h5);
% fcG1.abs(modelProteomics.G1regulation==0)=nan;
% fcG1.abs(fcG1.abs==0)=nan;
% fcG1.class=kmeans(fcG1.abs,3);
% figure(1)
% plot(fcG1.abs(fcG1.class==1,:),'LineWidth',3);
% hold on
% plot(fcG1.abs(fcG1.class==2,:),'LineWidth',3);
% plot(fcG1.abs(fcG1.class==3,:),'LineWidth',3);
% hold off
% 
% fcG1.foldchange(modelProteomics.G1regulation==0)=nan;
% fcG1.foldchange(fcG1.abs==0)=nan;
% fcG1(fcG1.foldchange<0 & fcG1.foldchange>0,:)
% fcG1(fcG1.foldchange<1 & fcG1.class==1,:)
% 
% varfun(@mean,fcG1,'InputVariables','abs','GroupingVariables','class')
% varfun(@mean,fcG1,'InputVariables','foldchange','GroupingVariables','rank')
% 
% mean(fcG0.abs(~isnan(fcG0.abs)));
% mean(fcG1.abs(~isnan(fcG1.abs)));

%% Exploring proteomics data
[modelProteomics]=addProtData(geneExprG0,proteomics);
modelProteomics.G0regulation=geneExprG0.rank;
modelProteomics.G1regulation=geneExprG1.rank;

%Visulizing
% Comparing averages during respiration and fermentation
plotfigure5(modelProteomics)

boxplot(table2array(modelProteomics(:,5:14))')

pathwayG0Ave=varfun(@mean,modelProteomics,'InputVariables','respirationAve',...
       'GroupingVariables','pathways');
pathwayAve=varfun(@mean,modelProteomics,'InputVariables','TotalAve',...
       'GroupingVariables','pathways');
pathwayG1Ave=varfun(@mean,modelProteomics,'InputVariables','fermentationAve',...
       'GroupingVariables','pathways');
foldchangeG0Ave=pathwayG0Ave{:,3}./pathwayAve{:,3}
foldchangeG1Ave=pathwayG1Ave{:,3}./pathwayAve{:,3}
rankG0=varfun(@mean,modelProteomics,'InputVariables','G0regulation',...
       'GroupingVariables','pathways');
rankG0.foldchangeG0Ave=foldchangeG0Ave;
% Classifying
classifyer=table();
classifyer.G0rank=modelProteomics.G0regulation;
classifyer.G0prot=modelProteomics.respirationAve;
classifyer.G0diff=modelProteomics.respirationAve./modelProteomics.TotalAve;
classifyer.G0diff(classifyer.G0rank==0)=nan;
classifyer.G1rank=modelProteomics.G1regulation;
classifyer.G1prot=modelProteomics.fermentationAve;
classifyer.G1diff=modelProteomics.fermentationAve./modelProteomics.TotalAve;
classifyer.G1diff(classifyer.G1rank==0)=nan;
classifyer.G0class=kmeans(classifyer.G0diff,2);
classifyer.G1class=kmeans(classifyer.G1diff,2);
plotfigure6(classifyer)

disp(['For the genes that have a foldchange less than 1 during respiration and are not regulated during fermentation ' num2str(sum(classifyer.G0rank(classifyer.G0diff<1 & classifyer.G1rank==0)<0)) ' are downregulated compared to ' num2str(sum(classifyer.G0rank(classifyer.G0diff<1 & classifyer.G1rank==0)>0)) ' that are upregulated.'])
disp(['For the genes that have a foldchange less than 1 during fermentation and are not regulated during resperation ' num2str(sum(classifyer.G1rank(classifyer.G1diff<1 & classifyer.G0rank==0)<0)) ' are downregulated compared to ' num2str(sum(classifyer.G1rank(classifyer.G1diff<1 & classifyer.G0rank==0)>0)) ' that are upregulated.'])



regulatedGenes.diff = (abs(regulatedGenes.meanABS-regulatedGenes.fermentation)+abs(regulatedGenes.meanABS-regulatedGenes.respiration))./2;
%regulatedGenes.diff = abs(regulatedGenes.respiration-regulatedGenes.fermentation);
regulatedGenes.fc = regulatedGenes.respiration./regulatedGenes.fermentation;
regulatedGenes.fc(regulatedGenes.fc<1)=regulatedGenes.fermentation(regulatedGenes.fc<1)./regulatedGenes.respiration(regulatedGenes.fc<1);
[B,I]=sort(regulatedGenes.diff);
regulatedGenes.class = kmeans(regulatedGenes.diff,3);
figure()
plot(B,'LineWidth',3)
figure()
plot(regulatedGenes.diff(regulatedGenes.class==1,:),'LineWidth',3);
hold on
plot(regulatedGenes.diff(regulatedGenes.class==2,:),'LineWidth',3);
plot(regulatedGenes.diff(regulatedGenes.class==3,:),'LineWidth',3);
hold off
meanC = [mean(regulatedGenes.diff(regulatedGenes.class==1,:)) mean(regulatedGenes.diff(regulatedGenes.class==2,:)) mean(regulatedGenes.diff(regulatedGenes.class==3,:))];
[mB,mI] = sort(meanC);
indexLowRegulation      = regulatedGenes.indx(regulatedGenes.class==mI(1),:);
indexMediumRegulation   = regulatedGenes.indx(regulatedGenes.class==mI(2),:);
indexHighRegulation     = regulatedGenes.indx(regulatedGenes.class==mI(3),:);
regulatedGenes.regulation=repelem("low",size(regulatedGenes.indx,1))';
regulatedGenes.regulation(regulatedGenes.class==mI(2),:)="medium";
regulatedGenes.regulation(regulatedGenes.class==mI(3),:)="high";
meanLR = mB(1);
meanMR = mB(2);
meanHR = mB(3);

disp('Relative values:')
disp(['The mean difference in low regulation is = ' num2str(meanLR)])
disp(['The mean difference in medium regulation is = ' num2str(meanMR)])
disp(['The mean difference in high regulation is = ' num2str(meanHR)])

fcLR = mean(regulatedGenes.fc(~isnan(regulatedGenes.fc)&regulatedGenes.class==mI(1),:));
fcMR = mean(regulatedGenes.fc(~isnan(regulatedGenes.fc)&regulatedGenes.class==mI(2),:));
fcHR = mean(regulatedGenes.fc(~isnan(regulatedGenes.fc)&regulatedGenes.class==mI(3),:));

disp('Fold change:')
disp(['The mean difference in low regulation is = ' num2str(fcLR)])
disp(['The mean difference in medium regulation is = ' num2str(fcMR)])
disp(['The mean difference in high regulation is = ' num2str(fcHR)])
G0Low = geneExprG0(indexLowRegulation,:);
G0Medium = geneExprG0(indexMediumRegulation,:);
G0High = geneExprG0(indexHighRegulation,:);




j=(sum(abs(geneExprG0.rank(indexLowRegulation,:))))/sum(geneExprG0.rank(indexLowRegulation,:)~=0);
disp(['Average rank in class "low regulation" during respiration = ' num2str(j)])
j=(sum(abs(geneExprG0.rank(indexMediumRegulation,:))))/sum(geneExprG0.rank(indexMediumRegulation,:)~=0);
disp(['Average rank in class "medium regulation" during respiration = ' num2str(j)])
j=(sum(abs(geneExprG0.rank(indexHighRegulation,:))))/sum(geneExprG0.rank(indexHighRegulation,:)~=0);
disp(['Average rank in class "high regulation" during respiration = ' num2str(j)])

G1Low = geneExprG1(indexLowRegulation,:);
G1Medium = geneExprG1(indexMediumRegulation,:);
G1High = geneExprG1(indexHighRegulation,:);

j=(sum(abs(geneExprG1.rank(indexLowRegulation,:))))/sum(geneExprG1.rank(indexLowRegulation,:)~=0);
disp(['Average rank in class "low regulation" during respiration = ' num2str(j)])
j=(sum(abs(geneExprG1.rank(indexMediumRegulation,:))))/sum(geneExprG1.rank(indexMediumRegulation,:)~=0);
disp(['Average rank in class "medium regulation" during respiration = ' num2str(j)])
j=(sum(abs(geneExprG1.rank(indexHighRegulation,:))))/sum(geneExprG1.rank(indexHighRegulation,:)~=0);
disp(['Average rank in class "high regulation" during respiration = ' num2str(j)])

%add pU
regulatedGenes.pU = meanpU(regulatedGenesIdx)';
%% Comparing proteomics data with Enzyme usages from unregulated model.



% Map proteomics data to EnzymeUsage data
for i = 1:size(proteomicsIndex,1)
    if proteomicsIndex(i) ~= 0
        respiration(i,:)     =proteomics(proteomicsIndex(i),13);
        fermentation(i,:)    =proteomics(proteomicsIndex(i),4);
    else
        respiration(i,:)     = table(0);
        fermentation(i,:)    = table(0);
    end
end
respiration=table2array(respiration);
fermentation=table2array(fermentation);
sumR=sum(respiration);
sumF=sum(fermentation);
for i = 1:size(proteomicsIndex,1)
    respiration(i)=respiration(i)/sumR;
    fermentation(i)=fermentation(i)/sumF;  
end

enzUsages_reducedYeast.respiration = respiration;
enzUsages_reducedYeast.fermentation = fermentation;

%Visualization
figure()
scatter(enzUsages_reducedYeast.D_01,enzUsages_reducedYeast.respiration)
figure()
scatter(enzUsages_reducedYeast.D_4,enzUsages_reducedYeast.fermentation)

%Bhattacharyya distance
q = enzUsages_reducedYeast.respiration;
p = enzUsages_reducedYeast.D_01;
BC=sum(sqrt(p.*q));
D_b=-log(BC);
disp(['The Bhattacharyya distance during respiration is ' num2str(D_b)])

q = enzUsages_reducedYeast.fermentation;
p = enzUsages_reducedYeast.D_4;
BC=sum(sqrt(p.*q));
D_b=-log(BC);
disp(['The Bhattacharyya distance during fermentation is ' num2str(D_b)])

DR=enzUsages_reducedYeast.respiration-enzUsages_reducedYeast.D_01;
DF=enzUsages_reducedYeast.fermentation-enzUsages_reducedYeast.D_4;
meanDR=mean(DR);
stdDR=std(DR);
disp(['The mean difference between simulated data and proteomics data during respiration is ' num2str(meanDR*100) '%']);
meanDF=mean(DF);
disp(['The mean difference between simulated data and proteomics data during fermentation is ' num2str(meanDF*100) '%']);

ranges =[];
for i = 1:length(D)
    ranges(:,i)=table2array(D{i}(G0Low.indx,2));
    G0Low.minU=table2array(D{i}(G0Low.indx,3));
    G0Low.maxU=table2array(D{i}(G0Low.indx,4));
    G0Low.pU=table2array(D{i}(G0Low.indx,5));
end
G0Low.ranges=ranges;

ranges =[];
for i = 1:length(D)
    ranges(:,i)=table2array(D{i}(G0Medium.indx,2));
    G0Medium.minU=table2array(D{i}(G0Medium.indx,3));
    G0Medium.maxU=table2array(D{i}(G0Medium.indx,4));
    G0Medium.pU=table2array(D{i}(G0Medium.indx,5));
end
G0Medium.ranges=ranges;

ranges =[];
for i = 1:length(D)
    ranges(:,i)=table2array(D{i}(G0High.indx,2));
    G0High.minU=table2array(D{i}(G0High.indx,3));
    G0High.maxU=table2array(D{i}(G0High.indx,4));
    G0High.pU=table2array(D{i}(G0High.indx,5));
end
G0High.ranges=ranges;

boxplot([sort(G0Low.ranges)' sort(G0Medium.ranges)' sort(G0High.ranges)']);

%% Percentage difference in regulation
%add changes perc
%enzUsages_reduced 
%regulatedGenes.perc=abs(enzUsages_reducedYeast.fermentation(regulatedGenesIdx,:)-enzUsages_reducedYeast.respiration(regulatedGenesIdx,:));
enzUsages_reducedYeast.fermentation(regulatedGenes.indx);
mLRF = abs(regulatedGenes.mean-enzUsages_reducedYeast.fermentation(regulatedGenes.indx));
mLRF = mean(mLRF(regulatedGenes.mean~=0 &regulatedGenes.class==mI(1),:));
mMRF = abs(regulatedGenes.mean-enzUsages_reducedYeast.fermentation(regulatedGenes.indx));
mMRF = mean(mMRF(regulatedGenes.mean~=0 &regulatedGenes.class==mI(2),:));
mHRF = abs(regulatedGenes.mean-enzUsages_reducedYeast.fermentation(regulatedGenes.indx));
mHRF = mean(mHRF(regulatedGenes.mean~=0 &regulatedGenes.class==mI(3),:));

mLRR = abs(regulatedGenes.mean-enzUsages_reducedYeast.respiration(regulatedGenes.indx));
mLRR = mean(mLRR(regulatedGenes.mean~=0 &regulatedGenes.class==mI(1),:));
mMRR = abs(regulatedGenes.mean-enzUsages_reducedYeast.respiration(regulatedGenes.indx));
mMRR = mean(mMRR(regulatedGenes.mean~=0 &regulatedGenes.class==mI(2),:));
mHRR = abs(regulatedGenes.mean-enzUsages_reducedYeast.respiration(regulatedGenes.indx));
mHRR = mean(mHRR(regulatedGenes.mean~=0 &regulatedGenes.class==mI(3),:));

percLR = mean(regulatedGenes.mean(regulatedGenes.mean~=0 &regulatedGenes.class==mI(1),:));
percMR = mean(regulatedGenes.mean(regulatedGenes.mean~=0 &regulatedGenes.class==mI(2),:));
percHR = mean(regulatedGenes.mean(regulatedGenes.mean~=0 &regulatedGenes.class==mI(3),:));
disp('Perc change:')
disp(['The mean difference in low regulation is = ' num2str(percLR)])
disp(['The mean difference in medium regulation is = ' num2str(percMR)])
disp(['The mean difference in high regulation is = ' num2str(percHR)])

%% What genes are regulated both in G0 and G1?
intersect = geneExprG0Idx-geneExprG1Idx;
intersect = intersect == 0;
regulatedGenes(intersect(regulatedGenesIdx),:)
%% Comparing proteomics data with Enzyme usages from regulated model.

% Load data from simulation 
% Loading enzyme usages constrained
path2Sim='/Users/linoste/Documents/GitHub/Crabtree/Code/Multiscale_Linnea/results/multiscale20200509/';
filename='enzUsage_VarAnalysis_D_';
format='.txt';
Dreg=cell(1,81);
i = 1;
for dilutionrate=0:(0.4/80):0.4
    Dreg{i}=readtable([path2Sim filename strrep(num2str(dilutionrate),'0.','') format]);
    i=1+i;
end
enzUsages_reducedYeast=readtable([path2Sim 'enzUsages_reducedYeast.txt']);


enzUsages_reducedYeast.respiration = respiration;
enzUsages_reducedYeast.fermentation = fermentation;

%Visualization
figure()
scatter(enzUsages_reducedYeast.D_01,enzUsages_reducedYeast.respiration)
figure()
scatter(enzUsages_reducedYeast.D_4,enzUsages_reducedYeast.fermentation)

%Bhattacharyya distance
q = enzUsages_reducedYeast.respiration;
p = enzUsages_reducedYeast.D_01;
BC=sum(sqrt(p.*q));
D_b=-log(BC);
disp(['The Bhattacharyya distance during respiration is ' num2str(D_b)])

q = enzUsages_reducedYeast.fermentation;
p = enzUsages_reducedYeast.D_4;
BC=sum(sqrt(p.*q));
D_b=-log(BC);
disp(['The Bhattacharyya distance during fermentation is ' num2str(D_b)])

DR=enzUsages_reducedYeast.respiration-enzUsages_reducedYeast.D_01;
DF=enzUsages_reducedYeast.fermentation-enzUsages_reducedYeast.D_4;
meanDR=mean(DR);
stdDR=std(DR);
disp(['The mean difference between simulated data and proteomics data during respiration is ' num2str(meanDR*100) '%']);
meanDF=mean(DF);
disp(['The mean difference between simulated data and proteomics data during fermentation is ' num2str(meanDF*100) '%']);

ranges =[];
for i = 1:length(Dreg)
    ranges(:,i)=table2array(Dreg{i}(G0Low.indx,2));
    G0Low.minU=table2array(Dreg{i}(G0Low.indx,3));
    G0Low.maxU=table2array(Dreg{i}(G0Low.indx,4));
    G0Low.pU=table2array(Dreg{i}(G0Low.indx,5));
end
G0Low.ranges=ranges;

ranges =[];
for i = 1:length(Dreg)
    ranges(:,i)=table2array(Dreg{i}(G0Medium.indx,2));
    G0Medium.minU=table2array(Dreg{i}(G0Medium.indx,3));
    G0Medium.maxU=table2array(Dreg{i}(G0Medium.indx,4));
    G0Medium.pU=table2array(Dreg{i}(G0Medium.indx,5));
end
G0Medium.ranges=ranges;

ranges =[];
for i = 1:length(Dreg)
    ranges(:,i)=table2array(Dreg{i}(G0High.indx,2));
    G0High.minU=table2array(Dreg{i}(G0High.indx,3));
    G0High.maxU=table2array(Dreg{i}(G0High.indx,4));
    G0High.pU=table2array(Dreg{i}(G0High.indx,5));
end
G0High.ranges=ranges;

boxplot([sort(G0Low.ranges)' sort(G0Medium.ranges)' sort(G0High.ranges)']);
