#install.packages("xml2")
require(xml2)
require(tidyverse)
library(stringr)
setwd("/Users/linoste/Documents/GitHub/Crabtree/Geistlinger2013")
data_xml = read_xml("diauxic_grn.xml")
data_list = as_list(data_xml)
data_list = data_list$relations
input = character(length = length(data_list))
output = character(length = length(data_list))
evidence = character(length = length(data_list))
type = character(length = length(data_list))
for (i in 1:length(data_list)) {
no_input = sum(names(data_list[[i]]) == "input")
no_output = sum(names(data_list[[i]]) == "output")
no_evidence = sum(names(data_list[[i]]) == "evidence")
input_str_full = ""
for (j in 1:no_input) {
symbol = attr(data_list[[i]][[j]],"symbol")
if(is.null(attr(data_list[[i]][[j]],"param"))){
param = ""
} else {
param = paste0("(",attr(data_list[[i]][[j]],"param"),")")
}
if(j == no_input){
input_str = paste0(symbol,param)
} else{
input_str = paste0(symbol,param," + ")
}
input_str_full = paste0(input_str_full, input_str)
}
output_str_full = ""
for (j in (1+no_input):(no_output+no_input)) {
symbol = attr(data_list[[i]][[j]],"symbol")
if(is.null(attr(data_list[[i]][[j]],"param"))){
param = ""
} else {
param = paste0("(",attr(data_list[[i]][[j]],"param"),")")
}
if(j == no_output+no_input){
output_str = paste0(symbol,param)
} else{
output_str = paste0(symbol,param," + ")
}
output_str_full = paste0(output_str_full, output_str)
}
evidence_str_full = ""
if(is.null(attr(data_list[[i]]$evidence,"symbol"))){
evidence_str_full = "none"
} else{
for (j in (1+no_input+no_output):(no_output+no_input+no_evidence)) {
if(j == no_output+no_input+no_evidence){
evidence_str = attr(data_list[[i]][[j]],"symbol")
} else{
evidence_str = paste0(attr(data_list[[i]][[j]],"symbol")," , ")
}
evidence_str_full = paste(evidence_str_full,
evidence_str)
}
}
type_str_full = attr(data_list[[i]],"type")[[1]]
cat(paste0("Reaction number ",i))
cat("\n")
cat(paste0(input_str_full," --> ", output_str_full))
cat("\n")
cat(paste0("Evidence: ",evidence_str_full))
cat("\n")
cat(paste0("Reaction type: ",type_str_full))
cat("\n")
cat("============================")
cat("\n")
input[i] = input_str_full
output[i] = output_str_full
evidence[i] = evidence_str_full
type[i] = type_str_full
}
reaction_df = data.frame(input,
output,
evidence,
type)
reaction_df %>% filter(type == "expression" | type == "tfbinding") -> reaction_df_selec
write.table(reaction_df_selec,file = "processed_data.csv", sep = ",", row.names = FALSE)
## Chose wich gene I whant to work with and from where to find it.
#reaction_df_selec %>% filter(grepl("MIG1",output)) -> reaction_df_selec_MIG1_output
reaction_df_selec %>% filter(grepl("glucose",input)) -> reaction_df_selec_glucose_input
View(reaction_df_selec_glucose_input)
View(reaction_df_selec_glucose_input)
